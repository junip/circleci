# Orb 'circleci/slack@4.4.0' resolved to 'circleci/slack@4.4.0'
version: 2
jobs:
  build1:
    docker:
    - image: cimg/python:3.6
    steps:
    - checkout
    - run:
        command: echo "hello junip"
  build2:
    docker:
    - image: cimg/python:3.6
    steps:
    - checkout
    - run:
        name: second build command
        command: |
          echo "asdasd"
          echo "asdasd333"
  build3:
    docker:
    - image: cimg/python:3.6
    steps:
    - checkout
    - run:
        name: third build command
        command: |
          echo "third build running"
          echo "third build message printed"
  build4:
    docker:
    - image: cimg/python:3.6
    steps:
    - checkout
    - run:
        name: fourth build command
        command: "echo \"fourth build running\"\necho \"fourth build message printed\"   \n"
  notification_on_slack:
    docker:
    - image: cimg/python:3.6
    steps:
    - run:
        name: slack notifications
        command: echo "asdasd"
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "$CIRCLE_BRANCH"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "$CIRCLE_TAG"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: .+
          SLACK_PARAM_CHANNEL: C01VBGM6DM0
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: always
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\\\n$CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
workflows:
  version: 2
  test_and_deploy:
    jobs:
    - build1
    - build2:
        requires:
        - build1
    - build3:
        requires:
        - build1
    - build4:
        requires:
        - build1
    - build5:
        type: approval
        requires:
        - build2
        - build3
        - build4
    - notification_on_slack:
        requires:
        - build5
